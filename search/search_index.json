{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Open Chat Studio Developer Documentation","text":"<p>Welcome to the Open Chat Studio developer documentation. This guide is designed to help you understand the architecture, setup your development environment, and contribute to the project effectively.</p>"},{"location":"#what-is-open-chat-studio","title":"What is Open Chat Studio?","text":"<p>Open Chat Studio is a platform for building, deploying, and evaluating AI-powered chat experiences. It provides tools for working with various LLMs (Language Learning Models), creating chatbots, managing conversations, and integrating with different messaging platforms.</p> <p>For user facing documentation, please visit docs.openchatstudio.com.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Create LLM-based based chatbots</li> <li>Create and manage conversational agents</li> <li>Connect to various messaging platforms</li> <li>Track and analyze conversations</li> <li>Customize conversation flows and logic</li> <li>Integrate with various service providers</li> </ul>"},{"location":"#documentation-sections","title":"Documentation Sections","text":"<ul> <li>Contributing: Guidelines for contributing to the project</li> <li>Getting Started: Setup your development environment</li> </ul>"},{"location":"architecture/","title":"Architecture","text":"<p>This section provides an overview of the Open Chat Studio architecture, explaining the core concepts and components that make up the system.</p>"},{"location":"architecture/#system-overview","title":"System Overview","text":"<p>Open Chat Studio is built as a Django web application with a modular design. It consists of several Django apps that handle different aspects of the system.</p>"},{"location":"architecture/#technology-stack","title":"Technology Stack","text":"<ul> <li>Backend: Django, Django REST Framework, Celery</li> <li>Database: PostgreSQL</li> <li>Cache/Message Broker: Redis</li> <li>Frontend: HTML, CSS (Tailwind + DaisyUI), htmx, AlpineJS, ReactJS with React Flow (for specific components)</li> <li>External Services: OpenAI, Azure, etc.</li> </ul>"},{"location":"architecture/#key-concepts","title":"Key Concepts","text":""},{"location":"architecture/#experiments","title":"Experiments","text":"<p>Experiments are configurations for AI chat experiences. They include: - Prompts and LLM configurations - Channel connections - Data collection settings</p> <p>Note</p> <p>The term 'Experiments' is a legacy term. On the user interface side, they are referred to as 'Chatbots'.</p>"},{"location":"architecture/#channels","title":"Channels","text":"<p>Channels are communication interfaces that connect users to the chat system. These include: - Web chat - Slack - WhatsApp - Facebook Messenger - Custom integrations</p>"},{"location":"architecture/#service-providers","title":"Service Providers","text":"<p>Service providers enable integration with external services: - LLM providers (OpenAI, Azure, etc.) - Voice providers - Authentication providers - Messaging providers - Tracing providers</p>"},{"location":"architecture/#pipelines","title":"Pipelines","text":"<p>Pipelines allow for the creation of complex workflows with multiple nodes and processing steps.</p>"},{"location":"architecture/#project-structure","title":"Project structure","text":"<p>The project is organized into several Django apps, each responsible for a specific functionality. Apps are placed in the <code>apps</code> folder, and each app has its own models, views, serializers, and tests. </p>"},{"location":"architecture/#django-templates","title":"Django Templates","text":"<p>Templates as well as static files are centralized in the <code>templates</code> and <code>assets</code> folders, respectively. Templates specific to an app should be placed in the <code>templates/{app_name}</code> directory.</p>"},{"location":"architecture/#static-files","title":"Static Files","text":"<p>The <code>assets</code> folder contains JavaScript, CSS. The <code>assets/styles</code> folder contains Tailwind CSS configurations, while the <code>assets/javascript</code> folder contains JavaScript modules. These files are processed and bundled using Webpack to create the final static assets served to users. Other static assets like images are placed directly in the <code>static/</code> folder.</p>"},{"location":"architecture/#cross-cutting-concerns","title":"Cross-Cutting Concerns","text":""},{"location":"architecture/#background-tasks","title":"Background Tasks","text":"<p>Open Chat Studio uses Celery for asynchronous task processing, which is critical for handling LLM interactions, scheduled messages, and other background operations.</p> <p>Key Files: - <code>gpt_playground/celery.py</code>: Celery configuration - Various <code>tasks.py</code> files in different apps</p>"},{"location":"architecture/#authentication-and-authorization","title":"Authentication and Authorization","text":"<p>The system uses Django's authentication system along with custom middleware and decorators to ensure proper access control.</p> <p>Key Files: - <code>teams/middleware.py</code>: Team-based access control - <code>teams/decorators.py</code>: Permission decorators</p>"},{"location":"architecture/#frontend-framework","title":"Frontend Framework","text":"<p>The frontend uses a combination of Django templates, Tailwind CSS, and JavaScript to create a responsive and interactive user interface.</p> <p>Key Files: - <code>templates/</code>: HTML templates - <code>assets/styles/</code>: CSS and Tailwind configurations - <code>assets/javascript/</code>: JavaScript modules</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Thank you for your interest in contributing to Open Chat Studio! This guide will help you understand the contribution process and code style conventions.</p>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<p>Before contributing, please make sure you've set up your development environment according to the Getting Started guide.</p>"},{"location":"contributing/#forms-of-contribution","title":"Forms of Contribution","text":""},{"location":"contributing/#provide-feedback","title":"Provide Feedback","text":"<ul> <li> <p>Report Bugs / Issues   If you encounter any issues or unexpected behavior in Open Chat Studio or its components, you can create a new issue in the GitHub issue tracker.</p> </li> <li> <p>Propose New Features / Improvements   If you have a suggestion for improving Open Chat Studio or want to share your ideas, you can open a new GitHub Discussion. If your idea is well-defined, you can also create a Feature Request Issue.   Provide a detailed description, including use cases, benefits, and potential challenges. Even if your idea is not immediately prioritized, it may still be considered later or taken up by the community.</p> </li> </ul>"},{"location":"contributing/#contribute-code-changes","title":"Contribute Code Changes","text":"<ul> <li>Fix Bugs or Develop New Features   If you want to help improve Open Chat Studio's codebase, choose an issue from the GitHub Issue Tracker and create a Pull Request addressing it. If you are new, check out the Good First Issues.</li> </ul> <p>Before starting, ensure that the change has not already been implemented. You can build Open Chat Studio using the latest <code>main</code> branch and confirm that the modification is still needed. If the feature is complex, discuss it first in the GitHub Discussions.</p>"},{"location":"contributing/#improve-documentation","title":"Improve Documentation","text":"<ul> <li>Developer Documentation needs improvement, and we welcome contributions.</li> <li>User Documentation is maintained in the open-chat-studio-docs repository and published at docs.openchatstudio.com.</li> <li>The easiest way to contribute to documentation is by reviewing and providing feedback. If you notice errors or opportunities for improvement, reach out to documentation contributors or create a Pull Request directly.</li> </ul>"},{"location":"contributing/#technical-guide","title":"Technical Guide","text":"<p>This section provides the necessary steps to set up your environment, build Open Chat Studio locally, and run tests.</p>"},{"location":"contributing/#1-set-up-your-environment","title":"1. Set Up Your Environment","text":"<p>Before contributing, please make sure you've set up your development environment according to the Getting Started guide.</p>"},{"location":"contributing/#2-start-working-on-your-first-issue","title":"2. Start Working on Your First Issue","text":"<p>To contribute, pick a task from the Good First Issues board. To be assigned to an issue, leave a comment with the <code>.take</code> command in the selected issue.</p>"},{"location":"contributing/#3-submit-a-pull-request-pr","title":"3. Submit a Pull Request (PR)","text":"<p>Follow our Pull Request guidelines.</p>"},{"location":"contributing/#getting-help","title":"Getting Help","text":"<p>If you have any questions or need assistance: - Use GitHub Discussions for general queries. - Check existing issues or open a new one if necessary. - Reach out to maintainers in GitHub if you need further guidance.</p>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing to Open Chat Studio, you agree that your contributions will be licensed under the terms stated in the LICENSE file.</p>"},{"location":"contributing/pull_requests/","title":"How to Prepare a Good Pull Request","text":"<p>Open Chat Studio is an open-source project, and you can contribute to its code directly. To do so, follow these guidelines for creating Pull Requests (PRs) to maximize the chances of your changes being merged.</p>"},{"location":"contributing/pull_requests/#general-rules-for-a-good-pull-request","title":"General Rules for a Good Pull Request","text":"<ul> <li>Fork the repository and use your fork to create PRs. Avoid creating change branches in the main repository.</li> <li>Choose an appropriate branch for your work and create your own branch based on it.</li> <li>Give your branches, commits, and Pull Requests meaningful names and descriptions. This helps track changes later. If your changes cover a particular component, indicate it in the PR name as a prefix, for example: <code>[DOCS] PR name</code>.</li> <li>Keep your PRs small\u2014each PR should address one issue. Remove all unrelated changes.</li> <li>Link your Pull Request to an issue if applicable.</li> <li>Document your contribution! If your changes impact how users interact with Open Chat Studio, update the relevant documentation. You can do this yourself or collaborate with documentation contributors.</li> <li>For Work In Progress or early test results, use a Draft PR.</li> </ul>"},{"location":"contributing/pull_requests/#ensure-change-quality","title":"Ensure Change Quality","text":"<p>Your pull request will automatically be tested and marked as \"green\" when it is ready for merging. If any builds fail (\"red\" status), you need to fix the issues listed in console logs. Any change to the PR branch will automatically trigger the checks, so you don't need to recreate the PR\u2014just wait for the updated results.</p> <p>Regardless of automated tests, ensure the quality of your changes:</p> <ul> <li>Test your changes locally:</li> <li>Double-check your code.</li> <li>Run tests locally to identify and fix potential issues.</li> <li>Before creating a PR, ensure your branch is up to date with the latest state of the branch you are contributing to (e.g. <code>git fetch upstream &amp;&amp; git merge upstream/master</code>).</li> </ul>"},{"location":"contributing/pull_requests/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Create your PR in draft state.</li> <li>Add a clear description of your changes and link any related issues.</li> <li>Request AI review by commenting <code>@coderabbit review</code> on your PR.</li> <li>Address any AI-suggested improvements.</li> <li>When ready, change PR state to \"Ready for review\" and assign reviewers.</li> <li>Address reviewer feedback.</li> <li>Once approved, your changes can be merged.</li> </ol> <p>Note: The AI review stage is optional but recommended for larger changes.</p>"},{"location":"contributing/pull_requests/#test-policy","title":"Test Policy","text":"<ul> <li>We use <code>pytest</code> for unit testing.</li> <li>All changes should ideally include tests.</li> <li>Focus on testing business logic and complex functionality.</li> <li>Generally, we don't test Django views unless they contain significant logic.</li> <li>When view logic becomes complex, extract it into separate functions and test those.</li> </ul>"},{"location":"contributing/pull_requests/#documentation-policy","title":"Documentation Policy","text":"<ul> <li>User-facing changes should be accompanied by documentation updates in the docs repo.</li> <li>Link the docs PR to the code PR.</li> <li>Merge the docs PR after the code PR.</li> </ul>"},{"location":"contributing/pull_requests/#communication","title":"Communication","text":"<p>We use GitHub issues for most work and have a GitHub project where we prioritize and plan work: GitHub Project.</p> <p>General questions and discussions can be conducted in the GitHub Discussions section.</p>"},{"location":"contributing/pull_requests/#need-additional-help-check-these-articles","title":"Need Additional Help? Check These Articles","text":"<ul> <li>How to create a fork</li> <li>Install Git</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This section will help you set up your development environment and get started with Open Chat Studio.</p>"},{"location":"getting-started/#development-environment-setup","title":"Development Environment Setup","text":"<p>Open Chat Studio uses UV and Invoke for dev automation.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11 (recommended)</li> <li>Node.js &gt;= 22.14.0</li> <li>Docker and Docker Compose</li> <li>Git</li> </ul>"},{"location":"getting-started/#installation-steps","title":"Installation Steps","text":"<ol> <li> <p>Clone the repository</p> <pre><code>git clone https://github.com/dimagi/open-chat-studio.git\ncd open-chat-studio\n</code></pre> </li> <li> <p>Install dependencies</p> <pre><code>uv venv\nuv sync\n</code></pre> </li> <li> <p>Run the automated setup</p> <pre><code>inv setup-dev-env\n</code></pre> <p>This will: - Install pre-commit hooks - Start database and Redis services - Run database migrations - Build frontend resources - Create a superuser</p> Manual steps </li> <li> <p>Start the development server</p> <pre><code>./manage.py runserver\n</code></pre> </li> <li> <p>Run Celery for background tasks</p> <p>Celery is required to handle LLM interactions. Run it using:</p> <pre><code>inv celery\n</code></pre> <p>For a production-like setup, use:</p> <pre><code>inv celery --gevent\n</code></pre> </li> </ol>"},{"location":"getting-started/#install-the-pre-commit-hooks","title":"Install the pre-commit hooks","text":"<pre><code>pre-commit install --install-hooks\n</code></pre>"},{"location":"getting-started/#set-up-database","title":"Set up database","text":"<p>Start the database and redis services and run the DB migrations:</p> <pre><code>inv up  # start the docker services\ncp .env.example .env\n./manage.py migrate\n</code></pre>"},{"location":"getting-started/#build-the-front-end-resources","title":"Build the front-end resources","text":"<p>To build JavaScript and CSS files, first install npm packages:</p> <pre><code>inv npm --install\n# or\nnpm install\nnpm run dev\n</code></pre> <p>Note</p> <p>You should be using node &gt;= 22.14.0. If you have nvm  installed, you can run <code>nvm use</code> to switch to the correct version.</p> <p>To check which version you are using use <code>node --version</code>.</p>"},{"location":"getting-started/#create-a-superuser","title":"Create a superuser","text":"<pre><code>./manage.py createsuperuser\n</code></pre>"},{"location":"getting-started/#common-development-tasks","title":"Common Development Tasks","text":""},{"location":"getting-started/#running-tests","title":"Running Tests","text":"<pre><code>pytest\n</code></pre> <p>Or to test a specific app/module:</p> <pre><code>pytest apps/utils/tests/test_slugs.py\n</code></pre>"},{"location":"getting-started/#updating-translations","title":"Updating Translations","text":"<pre><code>inv translations\n</code></pre>"},{"location":"getting-started/#linting-and-formatting","title":"Linting and Formatting","text":"<p>The project uses ruff for linting and formatting:</p> <pre><code>inv ruff\n</code></pre>"},{"location":"getting-started/#updating-requirements","title":"Updating Requirements","text":"<pre><code>inv requirements\n</code></pre> <p>To add a new requirement:</p> <pre><code>uv add &lt;package-name&gt;\n\n# for dev / prod dependencies\nuv add &lt;package-name&gt; --group [dev|prod]\n</code></pre>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Learn how to Contribute to the project</li> </ul>"}]}